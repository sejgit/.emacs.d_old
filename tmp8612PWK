;; Stephen's emacs init file
;; 2016-02-24 init
;; 2016 03 17 good ideas from aaron bedra's emacs configuration
;; 2016 11 29 integrate win-nt version & virtualbox
;; 2016 11 30 cleanup & concat with linux versions
;; 2016 12 12 transfer updates from test-version
;; 2016 12 15 updates due to win move to wsys2/ming64


;; set frame size and position
(defun set-frame-size-according-to-resolution ()
  (interactive)
  (if window-system
  (progn
    ;; use 120 char wide window for largeish displays
    ;; and smaller 80 column windows for smaller displays
    ;; pick whatever numbers make sense for you
    (if (> (x-display-pixel-width) 1280)
	(add-to-list 'default-frame-alist (cons 'width 100))
      ;;(add-to-list 'default-frame-alist (cons 'width 80))
	)
    ;; for the height, subtract a couple hundred pixels
    ;; from the screen height (for panels, menubars and
    ;; whatnot), then divide by the height of a char to
    ;; get the height we want
    (add-to-list 'default-frame-alist
         (cons 'height (/ (- (x-display-pixel-height) 110)
			  (frame-char-height))))
    (modify-frame-parameters
  nil '((user-position . t) (left . (- +160))))
    (modify-frame-parameters
  nil '((user-position . t) (top . (+ +20))))

    )))
(set-frame-size-according-to-resolution)

;; themes
(if (display-graphic-p)
    (load-theme 'tango-dark t)
  )

;; whoami
(setq user-full-name "Stephen Jenkins")
(setq user-mail-address "stephenearljenkins@gmail.com")

;(package-initialize)
(require 'package)
(setq package-enable-at-startup nil)

;; paths (generic, nt, then others
;; generic pathes
(setq load-path (append (list (expand-file-name "~/.emacs.d/lisp")) load-path))
(if (equal system-type 'windows-nt)
    (;; nt paths
     progn
      (setq ispell-personal-dictionary "C:/Users/NZ891R/gdrive/ehome/sej.ispell")
      ;; below has been commented out due to using shell level vars keeping 'just in case'
      ;;
      ;; (setq url-proxy-services
      ;; 	    '(("no_proxy" . "^\\(localhost\\|10.*\\)")
      ;; 	      ("http" . "naproxy.gm.com:80")
      ;; 	      ("https" . "naproxy.gm.com:80")))

      ;; (setq url-http-proxy-basic-auth-storage
      ;; 	    (list (list "naproxy.gm.com:80"
      ;; 			(cons "Input your LDAP UID !"
      ;; 			      (base64-encode-string "LOGIN:PASSWORD")))))
      )
  (;; non-nt path
   progn
    (setenv "PATH" (concat "/usr/local/bin:/opt/local/bin:/usr/bin:/bin:~/bin:" (getenv "PATH")))
    )
  )

;; keybindings
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)
(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-c C-k") 'compile)
(global-set-key (kbd "C-x g") 'magit-status)

(global-set-key (kbd "M-3") 'delete-other-windows)
(global-set-key (kbd "M-4") 'split-window-vertically)
(global-set-key (kbd "M-2") 'delete-window)
(global-set-key (kbd "M-s") 'other-window)

(global-set-key (kbd "<f1>") 'org-mode)

;; some beginning settings
(if (display-graphic-p)
  (scroll-bar-mode nil)
  (tool-bar-mode nil)
  ;;(menu-bar-mode -1)
  )
(setq column-number-mode t)

;; marking text and clipboard settings
(delete-selection-mode t)
(transient-mark-mode t)
(setq x-select-enable-clipboard t)

;; empty line settings
(setq-default indicate-empty-lines nil)
(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))

;; indentation
(setq tab-width 2
      indent-tabs-mode nil)

;; yes and no settings
(defalias 'yes-or-no-p 'y-or-n-p)

;; echo keystrokes ; no dialog boxes ; visable bell ; highlight parens
(setq echo-keystrokes 0.1
      use-dialog-box nil
      visible-bell t)
(show-paren-mode t)

;; Add proper word wrapping
(global-visual-line-mode t)

(setq backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist
      '(("." . ".saves"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups


;; load extensions

(add-hook 'after-init-hook (lambda () (load "~/.emacs.d/init-real.el")))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (org-trello org-cliplink org-bullets load-dir use-package ht))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
